@page "/login"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazorProject.Shared.Layout
@using MudBlazorProject.Shared.ViewModels.Account
@using Service.Abstraction.Account
@using Service.ViewModels.Account

@layout LoginLayout
@attribute [StreamRendering]
@attribute [AllowAnonymous]
@* @inject CustomAuthenticationStateProvider AuthenticationStateProvider *@
@inject NavigationManager _navigate
@* @inject Blazored.SessionStorage.ISessionStorageService _sessionStorage *@
@inject IAccountService _accountService;
<PageTitle>Login</PageTitle>


<div class="col-12 row">
    <div class="col-6 card" style="border-right:groove">
		<img src="~/src/logo/oip.jpg" width="100%" height="400px"/>
    </div>
	<div class="col-6 card" style="align-items:center;">
        <MudTabs Elevation="1" Rounded="false" PanelClass="pa-6" style="align-items:center">
            <MudTabPanel Text="Login" ToolTip="Welcome back!" Style="width:50%;border:groove;border-radius:15px">
                 <MudStack Class="justify-space-between mud-width-full">
            <MudCard Style="width:500px;glyph-orientation-horizontal:revert-layer">
                        <MudCardContent>
                             <MudForm Model="@_user">
                                <MudTextField @bind-value="@_user.Username" Label="Username" Variant="Variant.Text"></MudTextField>
                                <MudTextField @bind-value="@_user.Password" Label="Password" Variant="Variant.Text" InputType="@InputType.Password"></MudTextField>
                            </MudForm>
                            </MudCardContent>
                            <MudCardActions>
                                @* <MudButton Variant="Variant.Text" Color="Color.Success">Login</MudButton> *@
                                <MudButton Disabled="@_processing" OnClick="LoginProcess" Variant="Variant.Filled" Color="Color.Success">
                                    @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                    <MudText Class="ms-2">Processing</MudText>
                                } else
                                {
                                    <MudText>Login</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Register" ToolTip="Start with Registration!" Style="width:50%;border:groove;border-radius:15px">
                <MudStack Class="justify-space-between mud-width-full">
                    <MudCard Style="width:500px;">
                        <MudCardContent>
                            <MudForm Model="@_user" OnValidSubmit="@ValidateRegister()">
                                <MudTextField @bind-Value="@_user.Email" For="@(() => _user.Email)" Label="Email" Variant="Variant.Text"></MudTextField>
                                <MudTextField HelperText="Not Empty Username" @bind-Value="@_user.Username" For="@(() => _user.Username)" Label="Username" Variant="Variant.Text"></MudTextField>
                                <MudTextField HelperText="Max. 8 characters" @bind-Value="@_user.Password" For="@(() => _user.Password)" Label="Password" Variant="Variant.Text" InputType="@InputType.Password" Adornment="Adornment.End"></MudTextField>
                            </MudForm>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Adornment="Adornment.End">Submit</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudStack>
            </MudTabPanel>
        </MudTabs>
    </div>
</div>


@code {
    private bool _processing = false;
    // private UserViewModel _user = new UserViewModel();
    private UserAccountViewModel _user = new UserAccountViewModel();
    @inject HttpClient _httpClient;
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    public async Task<bool> ValidateUser()
    {
        if (!string.IsNullOrEmpty(_user.Username) && !string.IsNullOrEmpty(_user.Password))
        {
            // var _result = _httpClient.GetAsync("api/Account/Login");
            _navigate.NavigateTo("/");
        }
        // await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).NotifAuthenticated(_user.Email);
        // await _sessionStorage.SetItemAsync("Email", _user.UserName);

        return await Task.FromResult(true);
    }

    public async Task<bool> ValidateRegister()
    {
        if (!string.IsNullOrEmpty(_user.Username)) _navigate.NavigateTo("/login");
        if(!string.IsNullOrEmpty(_user.Password))
            // var _result = _httpClient.GetAsync("api/Account/Login");
            _navigate.NavigateTo("/login");
        if (!string.IsNullOrEmpty(_user.Email)) _navigate.NavigateTo("/login");

        // await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).NotifAuthenticated(_user.Email);
        // _navigate.NavigateTo("/");
        // await _sessionStorage.SetItemAsync("Email", _user.UserName);

        var _result = await _accountService.SingUp(_user);
        if(!_result.Succeeded) _navigate.NavigateTo("/login");
        return await Task.FromResult(true);
    }

    async Task LoginProcess()
    {
        _processing = true;
        await Task.Delay(10000);
        if (!string.IsNullOrEmpty(_user.Username) && !string.IsNullOrEmpty(_user.Password))
        {
            _processing = false;
            // var _result = _httpClient.GetAsync("api/Account/Login");
            _navigate.NavigateTo("/");
        }
    }
}
